1. Secreto: Solo lo es cuando lo conoce una sola persona.

2. Criptografia Asimetrica
  i. Curvas Elipticas
  ii. Factorizacon de numeros primos
  iii. Logaritmos Discretos

3. La Criptografia Asimetrica, maneja llave publica y llave privada.

4. El riesgo mas peligroso es el ataque del HOMBRE DE ENMEDIO.

5. Comando para ver documentacion de openssl:
  man openssl
                    PRUEBAS USANDO ALGORITMOS ENCRIPTACION SIMETRICA
6. Prueba de encripcion de archivo con algoritmo des:
  openssl enc -des -in prueba.txt -out prueba.enc.des -iter 16   -provider legacy -provider default
  enter DES-CBC encryption password: METEMOS UN PASSWORD DESEADO
  Verifying - enter DES-CBC encryption password: CONFIRMAMOS EL PASSWORD

7. Prueba de des-encripcion de archivo con algoritmo des:
  openssl enc -des -d -in prueba.enc.des -out prueba2.txt -iter 16   -provider legacy -provider default
  enter DES-CBC decryption password: METEMOS EL PASSWORD ASOCIADO

8. Prueba de encripcion con el algoritmo de encripcion AES-256:
  openssl enc -aes-256-cbc -in prueba.txt -out prueba.enc.aes-256 -iter 256

9. Prueba de des-encripcion con el algoritmo de encripcion AES-256:
  openssl enc -aes-256-cbc -d -in prueba.enc.aes-256 -out prueba2-aes-256.txt -iter 256
  *** Nota: el parametro -d es el que le dice al ejecutable que esta en modo de des-encripcion.

10. Comando para listar todos los algoritmos de cifrado que maneja OpenSSL:
  openssl list -cipher-algorithms

                    PRUEBAS USANDO ALGORITMOS ENCRIPTACION ASIMETRICA

11. Comando para listar todos los algoritmos de cifrado de Clave Publica que maneja OpenSSL:
  openssl list -public-key-algorithms

12. Comando para generacion de Clave Privada con algoritmo RSA:
  openssl genrsa -out clave-privRSA.pem 2048

13. Generar una clave publica asociada con la Clave Privada anterior:
  openssl rsa -in clave-privRSA.pem -pubout -out clave_pubRSA.pem

14. Si queremos generar una Clave Privada y que nos pida un password cada vez que la llamemos:
  openssl genrsa -aes128 -out clave_priv_RSA_con_passw.pem 2048

15. Generar una clave publica asociada con la Clave Privada anterior:
  openssl rsa -in clave_priv_RSA_con_passw.pem -pubout -out clave_pub_RSA_con_passw.pem

  NOTA: Lo ideal es tener una clave Publica y Privada protegida con Password

16. Ahora hacemos un ejemplo de un fichero encriptado con la Clave Publica que creamos previamente (la que tiene password)
  openssl pkeyutl -encrypt -inkey clave_pub_RSA_con_passw.pem -pubin -in pp.txt -out pp.criptoRSA

17. Para posteriormente desencriptar el archivo usando la Clave Privada:
  openssl pkeyutl -decrypt -inkey clave_priv_RSA_con_passw.pem -in pp.criptoRSA -out datos.recupRSA
  Enter pass phrase for clave_priv_RSA_con_passw.pem: METEMOS EL PASSWORD

                    PRUEBAS USANDO ALGORITMOS DE FUNCIONES O RESUMEN HASH

18. Caracteristicas de una Funcion HASH:
  - La salida siempre va a ser una longitud fija. Representacion: IN: FILE ==> HASH_FUCTION ==> OUT: Message Digest (digest = resumen)
    Sin importar el tamaño de la entrada...

  - De la salida es literalmente imposible reconstruir la entrada (Un solo sentido)

  - Fortaleza a Colisiones, (funcion hash perfecta), Jamas se va a obtener un mismo HASH de dos 
    archivos diferentes. No es imposible, pero es probabilisticamente remotamente imposible
    que se obtenga un mismo HASH de dos archivos diferentes. No se puede garantizar que exista 
    una fuincion hash perfecta.

19. Ejemplos de aplicacion HASH a algunos de los archivos de ejemplo:
            openssl dgst -md5 pp.txt 
    SALIDA: MD5(pp.txt)= e7df7cd2ca07f4f1ab415d457a6e1c13
            openssl dgst -md5 algs-count.txt
    SALIDA: MD5(algs-count.txt)= 8772496d803e5a63a7392398d99cc6d5
    
            openssl dgst -sha1 pp.txt 
    SHA1(pp.txt)= 1be168ff837f043bde17c0314341c84271047b31
            openssl dgst -sha1 algs-count.txt
    SHA1(algs-count.txt)= f74efc6a5972cbf6dbcb6689a282e2cf8d21cdc2

            openssl dgst -sha256 pp.txt 
    SHA2-256(pp.txt)= a883dafc480d466ee04e0d6da986bd78eb1fdd2178d04693723da3a8f95d42f4

            openssl dgst -sha512 pp.txt 
    SHA2-512(pp.txt)= 7985558370f0de86a864e0050afdf45d7029b8798bcd72cddbf781329f99380e3f3b1afdca6765d89fc388b213df8f6a193cfc56d4ff2ef6e0a99bd883a6d98c


    *** NOTAS: 
    - Como se puede, ver, las salidas son diferentes siempre. 
    - MD5 ya no es seguro hace años fue violado.
    - Para sacar la longitud en bits de un resumen HASH solo multiplica la cantidad
      de caracteres por 4. Ejemplo: si tomamos el ultimo hash mide 128 caracteres, 
      y luego lo multiplicamos por 4 128 * 4 = 512 bit como el nombre del algoritmo sha512

20. Existen comandos correspondientes que hacen lo mismo en Kali Linux:
    - md5sum pp.txt
    - sha1sum pp.txt
    - sha256sum pp.txt
    - etc...

21. Se llama Prueba de Integridad cuando se descarga un archivo y en la pagina del proveedor se 
    nos indica cual es el resumen sha512 (o el sha que indique el proveedor) de dicho archivo. 
    El procedimiento seria el siguiente:
    1. Se descarga el archivo
    2. Una vez descargado podemos ejecutar estos comandos:
      a) sha256sum nombre_archivo_descargado
    o
      b) openssl dgst sha512 nombre_archivo_descargado
    3. Comparamos el hash o resumen obtenido contra el publicado por el proveedor y:
      a) Si son iguales, significa que el archivo es legitimo y esta completo
      b) Si NO son iguales, significa que el archivo o no es legitimo, o no se descargo totalmente

22. Envio de archivo con HMAC (hash-based message authentication code) protegido con autenticacion:
    a) Si yo le quisiera mandar un archivo a un amigo, pero protegido por password
      openssl dgst -hmac "12345" pp.txt
    b) Le madaria yo el archivo y le diria que ejecute el mismo comando anterior, y como resultado
      mi amigo tiene que obtener la misma salida.

23. Para generar passwords mas complejos como por ejemplo, para no utuilizar passwords tan triviales
    como en el ejemplo anterior, existe la siguiente herramienta de openssl:
    openssl rand -hex 32
    Ejemplo:
      openssl rand -hex 32
      c0a813dee807d7383d842e6c000c22cc60a38a2269f0e1678b5dcd2d79d71933
    Y si nos vamos al ejemplo anterior, usando este password generado aleatoriamente:
      openssl dgst -hmac "c0a813dee807d7383d842e6c000c22cc60a38a2269f0e1678b5dcd2d79d71933" pp.txt
    Obtendriamos la siguiente salida:
      HMAC-SHA256(pp.txt)= 90abc13a2527d038d13c6b8de644ef5b0972dd838c32f5206a890dcc98b6d82a

24. Tambien podemos obtener password en base 64 utilizando esta misma herramienta pero en otro modo:
    openssl rand -base64 32
    UX5wZ0mOmGmrPjNcSJPqXxNpzklMYF/eancRnPrYW7g=

25. En resumen, podemos generar una Clave Privada, y de esta generar una Clave Publica.Y su mayor 
    vulnerabilidad es el ATAQUE DEL HOMBRE EN ENMEDIO. Por eso, es muy importante como se distribuyen 
    estas claves. Por lo cual existen dos formas de distribuir estas claces:
    a) Por medio de una Estructura de Confianza, en la cual, siendo una empresa pequeña asigno a
       una persona responsable de custodiar y distribuir estas claves.
    b) Cuando la empresa crece, la Estructura de Confianza ya no sirve, ahora es necesario tener
       algo mas solido, y aqui nace el concepto de Autoridad de Certificacion que es un SW o una maquina
       automatica que genra el par de claves, pero ademas les mete algunos tags o etiquetas aidcionales
      para darle validez a dichas claves (formato X.509) lo cual conforma ahora lo que se llama un 
      Certificado Digital.Dicha Autoridad de Certificacion, sera ahora quien los genere, los firme 
      y los distribuya. 

                    PRUEBAS CREANDO CERTIFICADOS DIGITALES

26. El primer paso es crear nuestro propia Clave Privada:
  openssl genrsa -out clave_privada_fdxsoft.pem 2048

27. Despues, procedemos a crear nuestra Clave Publica
  openssl rsa -in clave_privada_fdxsoft.pem -pubout -out clave_publica_fdxsoft.pem

28. Ahora vamos a crear un certificado para firmar:
  openssl req -new -key clave_privada_fdxsoft.pem -out certificado_fdxsoft_para_firmar.csr
  Le damos la informacion que se nos requiere, el password y listo, no lo crea en menos de un segundo.

29. Con este comando podemos revisar todos los tags contenidos en nuestro nuevo certificado:
  openssl asn1parse -in certificado_fdxsoft_para_firmar.csr

30. Ahora vamos a crear un certificado auto-firmado con nuestra Clave Privada:
  openssl x509 -req -days 365 -in certificado_fdxsoft_para_firmar.csr -signkey clave_privada_fdxsoft.pem -out certificado_fdxsoft_auto_firmado.crt

31. Si quisieramos ver el conteido de este nuevo certificado auto-firmado, solamente ejecutamos el 
  siguiente comando:
  openssl asn1parse -in certificado_fdxsoft_auto_firmado.csr

32. RESUMEN:
  PASO #1: Creamos una Clave Privada
  -rw------- 1 federico federico      1704 ago  5 08:49  clave_privada_fdxsoft.pem
  PASO #2: A partir de la Clave Privada, generamosuna Clave Publica
  -rw-rw-r-- 1 federico federico       451 ago  5 08:49  clave_publica_fdxsoft.pem
  PASO #3: Posteriormente, creamos un certificado para firmar (crs / certificate signin request)
  -rw-rw-r-- 1 federico federico      1143 ago  5 08:54  certificado_fdxsoft_para_firmar.csr
  PASO #4: Finalmente, se creo un certificado auto-firmado con la Clave Privada o Root
  -rw-rw-r-- 1 federico federico      1338 ago  5 09:10  certificado_fdxsoft_auto_firmado.crt

33. Ejemplo Practico #1 CIFRAR CON CERTIFICADOS
    Vamos a encriptar un archivo usando el certificado auto-firmado:
      openssl smime -encrypt -binary -aes-256-cbc -in pp.txt -out pp.txt.smime -outform DER certificado_fdxsoft_auto_firmado.crt
    Ya para desrncriptarlo usamos el siguiente comando (OJO: Como podemos ver, solo se puede desencriptar con el certificado root):
      openssl smime -decrypt -aes-256-cbc -in pp.txt.smime -inform DER -out pp.txr.smime.descifrado -inkey clave_privada_fdxsoft.pem 
    
34. Ejemplo Practico #2 FIRMAR CON CERTIFICADOS
    Para firmar un archivo con nuestro certificado usamos el siguiente comando:
      openssl dgst -c -sign clave_privada_fdxsoft.pem -out pp.txt.firmado pp.txt
    Este archivo fue firmado por la Clave Privada de FDXSOFT. Asi que, quien tenga
    la Clave Publica de FDXSOFT, sabra si el archivo fue firmado realmente por FDXSOFT:
      openssl dgst -verify clave_publica_fdxsoft.pem -signature pp.txt.firmado pp.txt
      Verified OK

35. Comando para ver el contenido o informacion de mi certificado de mi e-firma del SAT:
    openssl x509 -inform DER -in maef730713hd2.cer -noout -text

35. Comando para ver fechas de vigencia de mi certificado de mi e-firma del SAT:
    openssl x509 -inform DER -in maef730713hd2.cer -noout -dates


