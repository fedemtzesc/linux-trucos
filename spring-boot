  	PASOS PARA LA CREACI√ìN DE UN SERVICIO REST
1.- Creamos un paquete llamado models
2.- Y dentro creamos la clase principal que representa el modelo de datos y se mapea a una tabla en la BD: NombreEntidadModel
3.- Creamos un paquete llamado response
4.- Y dentro de este creamos la clase llamada MetadataResponse con un √∫nico campo del tipo ArrayList<HashMap<String,String>> y modificamos
    el m√©todo set que crea un HashMap con los par√°metros formales que necesitemos mostrar en cada respuesta de servicio. Esta clase tendra que ser 
    extendida en cada una de las clases del tipo NombreEntidadResponseRest
5.- Ademas creamos otra clase llamada NombreEntidadResponse con un √∫nico campo List<NombreEntidadModelo> con sus correspondientes m√©todos de 
    acceso. Esta clase tendra que ser implementada como un campo unico de cada clase NombreEntidadRestResponse
6.- Y finalmente creamos una ultima clase llamada NombreEntidadResponseRest que heredara de MetadataResponse y que tendr√° un unico campo del 
    tipo NombreEntidadResponse con sus correspondientes metodos de acceso.
7.- Ahora creamos un paquete llamado services dentro del paquete principal
8.- Y debajo de este nuevo paquete creamos una Interfase llamada INombreEntidadService  y dentro de esta interfase definimos todos los m√©todos
    que llevaran las clases que lo implementen para DI.
9.- Adicional a lo anterior, creamos una nueva clase llamada NombreEntidadServiceImpl que implementara a INombreEntidadService y los m√©todos que
    tiene definidos y la decoramos con @Service
10.- Ahora creamos un paquete llamado dao el cual coontendra todas las interfaces de spring boot para acceso a las bases de datos u otros datos 
     de persistencia.
11.- Y dentro de este paquete creamos una interfase llamada INombreEntidadDao la cual extender√° de la interfase CrudRepository
12.- Ahora nos pasamos nuevamente al paquete services a la clase NombreEntidadServiceImpl y declaramos una instancia del tipo INombreEntidadDao con 
     @Autowired para poder usar sus metodos de acceso a los datos de la BD, y asi pode implementar cada uno de los metodos definidos en la clase 
     que implementa llamada INombreEntidadService
13.- Ahora, para poder exponer los servicios hacia afuera tenemos que crear una paquete que contenga todos los controladores de nuestro proyecto 
     el cual obviamente se llamada controllers.
14.- Y dentro de este creamos un control por cada entidad creada con el siguiente nombre NombreEntidadController, y dentro de este definimos las 
      rutas de acceso principal y una especifica por cada metodo que representa cada uno de los servicios que tendra expuestos.
15.- Despu√©s, decoramos nuestra clase NombreEntidadController con @RestController y con @RequestMapping(‚Äú/ruta/del/servicio/principal/v1‚Äù)
16.- Y finalmente implementamos cada uno de los metodos definidos en el servicio creado llamado NombreEntidadServicio.
17.- En resumen se crearan en total las siguientes clases e interfases:
      i)    NombreEntidadModel            *** Clase que se mapea con su correspondiente tabla en la BD
      ii)   MetadataResponse              *** Solo se crea una unica vez para setear mensajes de respuesta en el API REST
      iii)  NombreEntidadResponse         *** Clase que solo implementa un arrego de NombreEntidadModel
      iv)   NombreEntidadResponseRest     *** Hereda de MetadataResponse e implementa NombreEntidadResponse
      v)    INombreEntidadDao             *** Implementa la interfase CrudRepository para acceder a la BD o persistencias de datos
      vi)   INombreEntidadService         *** Define los metodos que implementara NombreEntidadServiceImpl
      vii)  NombreEntidadServiceImpl      *** Implementa los metodos definidos por INombreEntidadService y accesa a los datos usando los metodos de INombreEntidadDao
      viii) NombreEntidadController       *** Expone los servicios o metodos implementados por NombreEntidadServiceImpl
18.- Cuales son los posibles valores para spring.jpa.hibernate.ddl-auto, y que finalidad tiene cada uno?
  üîπ none
     Descripci√≥n: No se realiza ninguna acci√≥n sobre el esquema.
     Uso t√≠pico: Cuando t√∫ mismo gestionas las migraciones (por ejemplo, con Flyway o Liquibase).

  üîπ validate
     Descripci√≥n: Valida que el esquema de la base de datos coincida con las entidades JPA.
     No crea ni modifica tablas.
     Uso t√≠pico: En producci√≥n, cuando quieres asegurarte de que el esquema est√° correcto pero no deseas que Hibernate lo toque.
  
  üîπ update
     Descripci√≥n: Hibernate actualizar√° autom√°ticamente el esquema para que coincida con las entidades JPA.
     Puede agregar columnas o tablas, pero no elimina nada.
     Uso t√≠pico: En desarrollo, para evitar hacer alteraciones manuales mientras desarrollas.
  
  üîπ create
     Descripci√≥n: Elimina y vuelve a crear todo el esquema cada vez que la aplicaci√≥n se reinicia.
     ¬°Se pierden todos los datos!
     Uso t√≠pico: Para pruebas r√°pidas o en ambientes de desarrollo.
  
  üîπ create-drop
     Descripci√≥n: Igual que create, pero adem√°s elimina el esquema al detener la aplicaci√≥n.
     Uso t√≠pico: Para tests automatizados o sesiones de desarrollo temporales.
  
  üîπ update vs validate vs none
    
  üîπ Entorno	Valor recomendado
        Desarrollo	update o create-drop
        Pruebas	create-drop
        Producci√≥n	validate o none

19. @Query nativa (con SQL)
  Ejemplo:
  @Query(value="SELECT * FROM personas WHERE id>20" nativeQuery=true)
  List<Persona> findAllPersonas()

20. @Query con JPQL (Java Persistence Query Language)
  Ejemplo:
  @Query(value="SELECT p FROM Persona p WHERE p.nombre LIKE %:filter%")
  List<Persona> findAllPersonas(@Param("filter") String filter)

